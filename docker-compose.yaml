services:
  nginx:
    container_name: ${PROJECT_SLUG}_nginx
    build:
      context: nginx
      dockerfile: Dockerfile
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  frontend:
    container_name: ${PROJECT_SLUG}_frontend
    build:
      context: frontend
      dockerfile: ../docker/frontend/Dockerfile
    depends_on:
      - backend
    restart: unless-stopped


  backend:
    container_name: ${PROJECT_SLUG}_backend
    build:
      context: backend
      dockerfile:   ../docker/backend/${ENVIRONMENT}/Dockerfile
      args:
        - NODE_ENV=${ENVIRONMENT}
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: db
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      PUBLIC_URL: ${PUBLIC_URL}
    volumes:
      - ./backend:/app
    depends_on:
      - db
    restart: unless-stopped

  db:
    container_name: ${PROJECT_SLUG}_db
    image: postgres:16.2-alpine3.19
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - /var/db:/var/lib/postgresql/data
    restart: unless-stopped

